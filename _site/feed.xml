<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-04-26T19:57:06-05:00</updated><id>/feed.xml</id><title type="html">Jacob A. Hudson</title><subtitle>All blog posts are available in GitHub and mirrored to Medium and DEV Community</subtitle><entry><title type="html">Bulk DynamoDB Population with Terraform</title><link href="/terraform/aws/dynamodb/2020/04/26/test.html" rel="alternate" type="text/html" title="Bulk DynamoDB Population with Terraform" /><published>2020-04-26T18:24:27-05:00</published><updated>2020-04-26T18:24:27-05:00</updated><id>/terraform/aws/dynamodb/2020/04/26/test</id><content type="html" xml:base="/terraform/aws/dynamodb/2020/04/26/test.html">&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;p&gt;DynamoDB is great!  It can be used for routing and metadata table, be used to lock Terraform State files, track states of applicatins and much more!  This post will offer a solution for populating the data within a DynamoDB table at create-rime, entirely within Terraform.&lt;/p&gt;

&lt;p&gt;The issue I am lokking to solve here is to providion a DynamoDB lookup table without from Terraform, without involving extra steps that Terraform can not invoke, without a ton of extra work, and something that can be easily re-produceable and scalable.&lt;/p&gt;

&lt;p&gt;The code is available here for thsoe who just wnat to get to the solution:  https://github.com/jacob-hudson/terraform-bulk-upload&lt;/p&gt;

&lt;h1 id=&quot;current-problem&quot;&gt;Current Problem&lt;/h1&gt;

&lt;p&gt;Provisiong an empty DynamoDB table in Terraform is quite easy, an example is below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_dynamodb_table&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;basic-dynamodb-table&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;           &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GameScores&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;billing_mode&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;PROVISIONED&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;read_capacity&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;write_capacity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;hash_key&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;UserId&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;range_key&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GameTitle&quot;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;UserId&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;S&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GameTitle&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;S&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;TopScore&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;N&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;ttl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;attribute_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;TimeToExist&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;enabled&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;global_secondary_index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;               &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GameTitleIndex&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;hash_key&lt;/span&gt;           &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GameTitle&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;range_key&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;TopScore&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;write_capacity&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;read_capacity&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;projection_type&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;INCLUDE&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;non_key_attributes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UserId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dynamodb-table-1&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Environment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;production&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Source:  https://www.terraform.io/docs/providers/aws/r/dynamodb_table.html&lt;/p&gt;

&lt;p&gt;This will result in a blank table, that has to be managed later.  Hashicorp does offer a solution for managing DynamoDB Iteams, as shown below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_dynamodb_table_item&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;example&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${aws_dynamodb_table.example.name}&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;hash_key&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${aws_dynamodb_table.example.hash_key}&quot;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ITEM&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
{
  &quot;exampleHashKey&quot;: {&quot;S&quot;: &quot;something&quot;},
  &quot;one&quot;: {&quot;N&quot;: &quot;11111&quot;},
  &quot;two&quot;: {&quot;N&quot;: &quot;22222&quot;},
  &quot;three&quot;: {&quot;N&quot;: &quot;33333&quot;},
  &quot;four&quot;: {&quot;N&quot;: &quot;44444&quot;}
}
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ITEM
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This works quite well, but is limited to one item per resource.  That does not scale well, and produces massive Terraform Configuratinn files.  In fact, the Terraform Documentation itself gives the same warning:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Note: This resource is not meant to be used for managing large amounts of data in your table, it is not designed to scale. You should perform regular backups of all data in the table, see AWS docs for more.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is clearly not an optiaml solution, so what can be done?  Letâ€™s see what AWS has to offer, since DynamoDB is an AWS Product&lt;/p&gt;

&lt;h1 id=&quot;putitem-vs-batchwriteitem&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PutItem&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;BatchWriteItem&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;DynamoDB offers a fwe mthods for writing data to tables, &lt;code class=&quot;highlighter-rouge&quot;&gt;PutItem&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;BatchWriteItem&lt;/code&gt;.  Some key details of each is below:&lt;/p&gt;

&lt;h2 id=&quot;putitem&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PutItem&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Is used to upload a single item&lt;/li&gt;
  &lt;li&gt;Can determine if the field exists before uploading&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;batchwriteitem&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BatchWriteItem&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Can upload many items to a table at once&lt;/li&gt;
  &lt;li&gt;Will simply overwite all items that ahve matching Primary Keys&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It looks as we have a working solution, as &lt;code class=&quot;highlighter-rouge&quot;&gt;BatchWriteItem&lt;/code&gt; will load as many items into a table as we like, will be able to do everything at once, and we can centralize data managment of the table.&lt;/p&gt;

&lt;p&gt;Now, how can we get this to be invovled solely from Terraform?&lt;/p&gt;

&lt;h1 id=&quot;local-exec-provisoner&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Local-Exec&lt;/code&gt; Provisoner&lt;/h1&gt;

&lt;p&gt;A privisioner in Terraform allows for the execution of a file into either the local machine running Terraform for the machine Terraform just provisioned.  In a little known fact for Terraform, &lt;code class=&quot;highlighter-rouge&quot;&gt;local-exec&lt;/code&gt; will run on any resource, not just EC2!&lt;/p&gt;

&lt;p&gt;An example of using local-exec with EC2 is below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-hcl&quot; data-lang=&quot;hcl&quot;&gt;&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_instance&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;web&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;provisioner&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;local-exec&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;echo The server's IP address is ${self.private_ip}&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The example above is for EC2; However, &lt;code class=&quot;highlighter-rouge&quot;&gt;local-exec&lt;/code&gt; can run for any AWS resource, including DynamoDB!&lt;/p&gt;

&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;/h1&gt;
&lt;p&gt;Alright, so we now have the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A Terraform Configuration to Build a DynamoDB Table&lt;/li&gt;
  &lt;li&gt;A Method for uploading multiple items to said table&lt;/li&gt;
  &lt;li&gt;A Solution for executing the dataload from Terraform&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The only thing left now is to put everything together!&lt;/p&gt;

&lt;p&gt;In this example,  i ahve rpovisoned a very simple DynamoDB table, with 1 unite of Read and Write cataptiy, no encryption, no streams, and no Autoscaling.  Within the DynamoDB resource, I invoke the &lt;code class=&quot;highlighter-rouge&quot;&gt;local-exec&lt;/code&gt; provisoner to kick off a Shell script on the same machine that is running Terrafrom (which also has the AWSCLI installed), this will run &lt;code class=&quot;highlighter-rouge&quot;&gt;BactchWriteItem&lt;/code&gt; for the table I just created and load all of the sample data.&lt;/p&gt;</content><author><name></name></author><summary type="html">Overview</summary></entry></feed>